{
  "version": 3,
  "sources": ["../../rickmortyapi/src/index.ts", "../../rickmortyapi/src/utils/generateQueryString.ts", "../../rickmortyapi/src/utils/get.ts", "../../rickmortyapi/src/utils/getResource.ts", "../../rickmortyapi/src/character/index.ts", "../../rickmortyapi/src/location/index.ts", "../../rickmortyapi/src/episode/index.ts", "../../rickmortyapi/src/endpoints/index.ts"],
  "sourcesContent": ["export { getCharacters, getCharacter } from './character'\nexport { getLocations, getLocation } from './location'\nexport { getEpisodes, getEpisode } from './episode'\nexport { getEndpoints } from './endpoints'\nexport * from './interfaces';\n", "import { GetResource } from './getResource'\n\nexport const errorMessage = {\n  required: 'You are using an invalid argument. As an argument use an integer (Id) or an array of integers (Ids).',\n  optional: 'You are using an invalid argument. As an argument use a filter object or leave it blank.',\n}\n\nconst isInteger = (val: unknown) => typeof val === 'number' && Number.isInteger(val)\n\nexport const isArrayOfIntegers = (val: unknown): boolean => Array.isArray(val) && val.every(isInteger)\n\nconst generateQueryString = (query: GetResource['options'], isIdRequired?: boolean): string => {\n  if (isIdRequired && isInteger(query)) {\n    return `/${query}`\n  }\n\n  if (isIdRequired && isArrayOfIntegers(query)) {\n    const arrayOfIds = query as number[]\n\n    /**\n     * [0] forces the API to return an empty array.\n     * This should be addressed in the next API codebase update.\n     */\n    return `/${arrayOfIds.length ? arrayOfIds : '[0]'}`\n  }\n\n  if (!isIdRequired && typeof query === 'object' && !Array.isArray(query)) {\n    const params = new URLSearchParams(query as Record<string, string>).toString()\n    return `/?${params}`\n  }\n\n  throw new Error(errorMessage[isIdRequired ? 'required' : 'optional'])\n}\n\nexport default generateQueryString\n", "const get = async (endpoint: string): Promise<{ data: unknown; status: number; statusMessage: string }> => {\n  const res = await fetch(`https://rickandmortyapi.com/api/${endpoint}`)\n\n  // response.status >= 200 && response.status < 300\n  if (res.ok) {\n    const data = await res.json()\n\n    return {\n      data,\n      status: res.status,\n      statusMessage: res.statusText,\n    }\n  }\n\n  return {\n    data: {},\n    status: res.status,\n    statusMessage: res.statusText,\n  }\n}\n\nexport default get\n", "import { CharacterFilter, EpisodeFilter, LocationFilter } from '../interfaces'\nimport generateQueryString from './generateQueryString'\nimport get from './get'\n\nexport interface GetResource {\n  endpoint: 'character' | 'location' | 'episode' | ''\n  options: number | number[] | CharacterFilter | LocationFilter | EpisodeFilter\n  isIdRequired?: boolean\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getResource = async ({ endpoint, options, isIdRequired = false }: GetResource): Promise<any> => {\n  const qs = generateQueryString(options, isIdRequired)\n\n  return get(`${endpoint}/${qs}`)\n}\n\nexport default getResource\n", "import { ApiResponse, Character, CharacterFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'character'\n\n/**\n * Gets a collection of Characters.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacters = (filters?: CharacterFilter): Promise<ApiResponse<Info<Character[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Character by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#character\n */\nexport const getCharacter = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Character : Character[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Info, Location, LocationFilter } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'location'\n\n/**\n * Gets a collection of Locations.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocations = (filters?: LocationFilter): Promise<ApiResponse<Info<Location[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets a Location by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#location\n */\nexport const getLocation = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Location : Location[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Episode, EpisodeFilter, Info } from '../interfaces'\nimport getResource from '../utils/getResource'\n\nconst endpoint = 'episode'\n\n/**\n * Gets a collection of Episodes.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisodes = (filters?: EpisodeFilter): Promise<ApiResponse<Info<Episode[]>>> =>\n  getResource({ endpoint, options: filters ?? {} })\n\n/**\n * Gets an Episode by `id` or array of `ids`.<br/>\n * https://rickandmortyapi.com/documentation/#episode\n */\nexport const getEpisode = <T extends number | number[]>(\n  id: T,\n): Promise<ApiResponse<T extends number ? Episode : Episode[]>> =>\n  getResource({ endpoint, options: id, isIdRequired: true })\n", "import { ApiResponse, Endpoints } from '../interfaces'\nimport getResource from '../utils/getResource'\n\n/**\n * Gets a list of available resources.<br/>\n * https://rickandmortyapi.com/documentation/#rest\n */\nexport const getEndpoints = (): Promise<ApiResponse<Endpoints>> => getResource({ endpoint: '', options: {} })\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,QAAAA,IAAA,CAAA;AAAAC,MAAAD,GAAA,EAAA,cAAA,MAAAE,GAAA,eAAA,MAAAC,GAAA,cAAA,MAAAC,GAAA,YAAA,MAAAC,GAAA,aAAA,MAAAC,GAAA,aAAA,MAAAC,GAAA,cAAA,MAAAC,EAAAA,CAAAA;AAAA,WAAA,UAAAC,EAAAT,CAAAA;ACEO,QAAMU,IAAe,EAC1B,UAAU,wGACV,UAAU,2FACZ;AAHO,QAKDC,IAAaC,OAAiB,OAAOA,KAAQ,YAAY,OAAO,UAAUA,CAAG;AAL5E,QAOMC,IAAqBD,OAA0B,MAAM,QAAQA,CAAG,KAAKA,EAAI,MAAMD,CAAS;AAP9F,QASDG,IAAsB,CAACC,GAA+BC,MAAmC;AAC7F,UAAIA,KAAgBL,EAAUI,CAAK,EACjC,QAAO,IAAIA,CAAAA;AAGb,UAAIC,KAAgBH,EAAkBE,CAAK,GAAG;AAC5C,YAAME,IAAaF;AAMnB,eAAO,IAAIE,EAAW,SAASA,IAAa,KAAA;MAC9C;AAEA,UAAI,CAACD,KAAgB,OAAOD,KAAU,YAAY,CAAC,MAAM,QAAQA,CAAK,EAEpE,QAAO,KADQ,IAAI,gBAAgBA,CAA+B,EAAE,SAAS,CAAA;AAI/E,YAAM,IAAI,MAAML,EAAaM,IAAe,aAAa,UAAA,CAAW;IACtE;AA9BO,QAgCAE,IAAQJ;AClCf,QAAMK,IAAM,OAAOC,MAAwF;AACzG,UAAMC,IAAM,MAAM,MAAM,mCAAmCD,CAAAA,EAAU;AAGrE,aAAIC,EAAI,KAGC,EACL,MAHW,MAAMA,EAAI,KAAK,GAI1B,QAAQA,EAAI,QACZ,eAAeA,EAAI,WACrB,IAGK,EACL,MAAM,CAAC,GACP,QAAQA,EAAI,QACZ,eAAeA,EAAI,WACrB;IACF;AAnBA,QAqBOC,IAAQH;ACVf,QAAMI,IAAc,OAAO,EAAE,UAAAH,GAAU,SAAAI,GAAS,cAAAR,IAAe,MAAM,MAAiC;AACpG,UAAMS,IAAKP,EAAoBM,GAASR,CAAY;AAEpD,aAAOM,EAAI,GAAGF,CAAAA,IAAYK,CAAAA,EAAI;IAChC;AAJA,QAMOC,IAAQH;ACdf,QAAMH,IAAW;AAAjB,QAMajB,IAAiBwB,OAC5BD,EAAY,EAAE,UAAAN,GAAU,SAASO,KAAW,CAAC,EAAE,CAAC;AAPlD,QAaazB,IACX0B,OAEAF,EAAY,EAAE,UAAAN,GAAU,SAASQ,GAAI,cAAc,KAAK,CAAC;AChB3D,QAAMR,IAAW;AAAjB,QAMaZ,IAAgBmB,OAC3BD,EAAY,EAAE,UAAAN,GAAU,SAASO,KAAW,CAAC,EAAE,CAAC;AAPlD,QAaapB,IACXqB,OAEAF,EAAY,EAAE,UAAAN,GAAU,SAASQ,GAAI,cAAc,KAAK,CAAC;AChB3D,QAAMR,IAAW;AAAjB,QAMad,IAAeqB,OAC1BD,EAAY,EAAE,UAAAN,GAAU,SAASO,KAAW,CAAC,EAAE,CAAC;AAPlD,QAaatB,IACXuB,OAEAF,EAAY,EAAE,UAAAN,GAAU,SAASQ,GAAI,cAAc,KAAK,CAAC;ACZpD,QAAMxB,IAAe,MAAuCsB,EAAY,EAAE,UAAU,IAAI,SAAS,CAAC,EAAE,CAAC;;;",
  "names": ["src_exports", "__export", "getCharacter", "getCharacters", "getEndpoints", "getEpisode", "getEpisodes", "getLocation", "getLocations", "__toCommonJS", "errorMessage", "isInteger", "val", "isArrayOfIntegers", "generateQueryString", "query", "isIdRequired", "arrayOfIds", "generateQueryString_default", "get", "endpoint", "res", "get_default", "getResource", "options", "qs", "getResource_default", "filters", "id"]
}
