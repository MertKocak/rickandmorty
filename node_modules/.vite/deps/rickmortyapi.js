var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/rickmortyapi/dist/index.js
var require_dist = __commonJS({
  "node_modules/rickmortyapi/dist/index.js"(exports, module) {
    var i = Object.defineProperty;
    var A = Object.getOwnPropertyDescriptor;
    var E = Object.getOwnPropertyNames;
    var I = Object.prototype.hasOwnProperty;
    var L = (e, t) => {
      for (var o in t) i(e, o, { get: t[o], enumerable: true });
    };
    var C = (e, t, o, n) => {
      if (t && typeof t == "object" || typeof t == "function") for (let s of E(t)) !I.call(e, s) && s !== o && i(e, s, { get: () => t[s], enumerable: !(n = A(t, s)) || n.enumerable });
      return e;
    };
    var F = (e) => C(i({}, "__esModule", { value: true }), e);
    var $ = {};
    L($, { getCharacter: () => d, getCharacters: () => u, getEndpoints: () => h, getEpisode: () => b, getEpisodes: () => R, getLocation: () => l, getLocations: () => f });
    module.exports = F($);
    var T = { required: "You are using an invalid argument. As an argument use an integer (Id) or an array of integers (Ids).", optional: "You are using an invalid argument. As an argument use a filter object or leave it blank." };
    var a = (e) => typeof e == "number" && Number.isInteger(e);
    var y = (e) => Array.isArray(e) && e.every(a);
    var P = (e, t) => {
      if (t && a(e)) return `/${e}`;
      if (t && y(e)) {
        let o = e;
        return `/${o.length ? o : "[0]"}`;
      }
      if (!t && typeof e == "object" && !Array.isArray(e)) return `/?${new URLSearchParams(e).toString()}`;
      throw new Error(T[t ? "required" : "optional"]);
    };
    var p = P;
    var w = async (e) => {
      let t = await fetch(`https://rickandmortyapi.com/api/${e}`);
      return t.ok ? { data: await t.json(), status: t.status, statusMessage: t.statusText } : { data: {}, status: t.status, statusMessage: t.statusText };
    };
    var c = w;
    var k = async ({ endpoint: e, options: t, isIdRequired: o = false }) => {
      let n = p(t, o);
      return c(`${e}/${n}`);
    };
    var r = k;
    var m = "character";
    var u = (e) => r({ endpoint: m, options: e ?? {} });
    var d = (e) => r({ endpoint: m, options: e, isIdRequired: true });
    var g = "location";
    var f = (e) => r({ endpoint: g, options: e ?? {} });
    var l = (e) => r({ endpoint: g, options: e, isIdRequired: true });
    var x = "episode";
    var R = (e) => r({ endpoint: x, options: e ?? {} });
    var b = (e) => r({ endpoint: x, options: e, isIdRequired: true });
    var h = () => r({ endpoint: "", options: {} });
  }
});
export default require_dist();
//# sourceMappingURL=rickmortyapi.js.map
